<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>IKVM.NET Case Studies</title>
</head>

<body>

<h2>IKVM at eInstruction</h2>

At <a href="http://www.eInstruction.com/">eInstruction</a>, we provide classroom response systems that include custom hardware for gathering responses from students.
Our main application was originally written in J++, including some pure Java libraries.
This past year we needed to port to .NET. We made some attempts with J#, but ran into some limitations that IKVM does
not suffer from. IKVM has been a key part of the success of our port, and we continue to use it to cross-compile our Java
hardware API to .NET. IKVM is stable, performs great and Jeroen's support for the few esoteric cases we've run into has
been fantastic. -- Chris Morris, eInstruction.

<h2>IKVM at WL | Delft Hydraulics</h2>

I'm David Levelt, Software Engineer. I work at <a href="http://www.wldelft.nl">WL | Delft Hydraulics</a>.<br /> WL
| Delft Hydraulics is an independent research institute and specialist consultancy based in the Netherlands.
One of our tasks is to make world leading software in watermodelling. I work on the integration of different models.
Some models may concern water movement, other models may provide information on water quality.
All these models have to work together and exchange information.
My main concern is the data communication between these models.
<p />
At this moment we're working on making our software OpenMI compliant.
OpenMI is a European standard for inter model communication. The standard defines how, when and what information is
exchanged between models.

<p />
In this part of our software different programming languages are used.
The calculations in the models are done with FORTRAN 90. The communication between models is layered.
The interprocess communication is implemented in Java.
The OpenMI implementation, which takes care of the communication on model level is written in C#.

<p />
To make the connection between these communication layers we are using IKVM. A colleague informed me about the IKVM software.
I read the documentation on the website, downloaded and started combining it with our software. It was an instant success.
It solved a lot of our multi-language problems. We haven't stopped using it.

<p />
I have run into two problems. After updating our Java version to version 5.0, it didn't compile.
It was easily fixed with assistance of the IKVM main developers.
The second problem is trickier. In one of our test cases the Java code fails in the first call.
This can be fixed by declaring a Java object in the main routine of the program.
It can have something to do with threading in combination with initialization of static variables in the Java code.
We have not figured out the problem yet.
A drawback of IKVM is in this case that you can not debug the Java code to track down the problem.

<p />
IKVM saves us a lot of time setting up the connection between Java and C#.
It can be a drawback when you have to debug the underlying Java code.
It's amazing how this software bridges the gap between the Java and C# world.

</body>
</html>
